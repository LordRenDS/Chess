@startuml Chess
skinparam classAttributeIconSize 0
left to right direction
' skinparam linetype ortho

package engine{
    package board{
        class Square{
            -coordinate : int
            -figureOnSquare : std::unique_ptr<Figure>
            ..getters..
            +getCoordinate() const : int
            +getFigureOnSquare() : Figure *
            +getFigureOnSquare() const : const Figure *
            ..setters..
            +setFigureOnSquare(newFigure : std::unique_ptr<Figure>)
            __
            +releaseFigure() : std::unique_ptr<Figure>
            +isSquareOccupied() const : bool
        }
        class Board{
            -board : std::array<std::unique_ptr<Square>, BoardUtils::NUMBER_SQUARES>
            -enPassantPawn : Pawn *
            ..getters..
            +getEnPassantPawn() : Pawn *
            ..setters..
            +setEnPassantPawn(pawn : Pawn *);
            __
            -setFigureOnBoard(figure : std::unique_ptr<Figure>)
            +operator=(board : Board &&) noexcept : Board &
            +getActiveFigures() : std::vector<Figure *>
            +getActiveFigures(color : Color::ColorT) : std::vector<Figure *>
            +getSquare(coordinate : int) : Square *
            +getSquare(coordinate : int) const : const Square *
            +calculateLegalMoves(playerColor : Color::ColorT) : std::vector<std::unique_ptr<Move>>
            +getKing(color : Color::ColorT ) : King *
            +printBoard() const
            +evaluateBoard() : int
        }

        Square --* Board
    }

    package move{
        abstract class Move{}
        class MajorMove
        class PawnMove
        class PawnJump
        class PawnPromotion
        abstract class AttackMove
        class MajorAttackMove
        class PawnAttackMove
        class PawnEnPassantAttackMove
        abstract class CastleMove
        class KingSideCastleMove
        class QueenSideCastleMove

        Move <|-- MajorMove
        Move <|-- PawnMove
        Move <|-- PawnJump
        Move <|-- PawnPromotion
        Move <|-- CastleMove
        CastleMove <|-- KingSideCastleMove
        CastleMove <|-- QueenSideCastleMove
        Move <|-- AttackMove
        AttackMove <|-- MajorAttackMove
        AttackMove <|-- PawnAttackMove
        PawnAttackMove <|-- PawnEnPassantAttackMove
    }

    package figure{
        abstract class Figure{}
        class King{}
        class Queen
        class Rook
        class Knight
        class Bishop
        class Pawn{}

        Figure <|-- King
        Figure <|-- Queen
        Figure <|-- Rook
        Figure <|-- Knight
        Figure <|-- Bishop
        Figure <|-- Pawn
    }

    package player{
        abstract class Player{}
        class WhitePlayer
        class BlackPlayer

        Player <|-- WhitePlayer
        Player <|-- BlackPlayer
    }

    class BoardUtils{
        {static} +NUMBER_SQUARES : int
        {static} +NUMBER_SQUARE_PER_ROW : int
        {static} +EIGHTH_RANK : std::array<bool, NUMBER_SQUARES>
        {static} +SEVENTH_RANK : std::array<bool, NUMBER_SQUARES>
        {static} +SIXTH_RANK : std::array<bool, NUMBER_SQUARES>
        {static} +FIFTH_RANK : std::array<bool, NUMBER_SQUARES>
        {static} +FOURTH_RANK : std::array<bool, NUMBER_SQUARES>
        {static} +THIRD_RANK : std::array<bool, NUMBER_SQUARES>
        {static} +SECOND_RANK : std::array<bool, NUMBER_SQUARES>
        {static} +FIRST_RANK : std::array<bool, NUMBER_SQUARES>
        {static} +FIRST_COLUMN : std::array<bool, NUMBER_SQUARES>
        {static} +SECOND_COLUMN : std::array<bool, NUMBER_SQUARES>
        {static} +SEVENTH_COLUMN : std::array<bool, NUMBER_SQUARES>
        {static} +EIGHT_COLUMN : std::array<bool, NUMBER_SQUARES>
        {static} -ALGEBRAIC_NOTATION : std::array<std::string, NUMBER_SQUARES>
        {static} -POSITION_TO_COORDINATE : std::map<std::string, int>

        {static} +getCoordinateAtPosition(position : const std::string &) : int
        {static} +getPositionAtCoordinate(coordinate : int) : std::string
        {static} +isValidSquareCoordinate(coordinate : int) : bool
        {static} -initRow(rowNumber : int) : std::array<bool, NUMBER_SQUARES>
        {static} -initColumn(colNumber : int) : std::array<bool, NUMBER_SQUARES>
        {static} -initializePositionToCoordinate() : std::map<std::string, int>
    }
    enum FigureType{
        KING
        QUEEN
        ROOK
        KNIGHT
        BISHOP
        PAWN
    }
    enum MoveStatus{
        DONE
        ILLEGAL_MOVE
        LEAVE_PLAYER_IN_CHEK
    }
    package color{
        class Color{}
        enum ColorT{
            BLACK
            WHITE
        }
        Color ..> ColorT
    }
    class AI{}

    Figure <--* Square

    BoardUtils <.. Board
    Pawn o-- Board
    King <.. Board
    Figure "*" -- "1" Board
    color.ColorT <.. Board

    color.ColorT <-- Figure
    FigureType <-- Figure

    Move o--> Figure
    Board "1" -- "*" Move
    PawnPromotion *-- Move
    PawnPromotion *-- Figure

    Board <.. Player
    Move *-- Player
    King o-- Player
    color.ColorT <.. Player
    MoveStatus <.. Player

    Move <.. AI

    ' FigureType <.. Board
    ' FigureType <.. Player

    ' color <.. figure
    ' color.Color <.. King
    ' color.Color <.. Queen
    ' color.Color <.. Bishop
    ' color.Color <.. Knight
    ' color.Color <.. Rook
    ' color.Color <.. Pawn

    ' MoveStatus <.. AI

    ' Move <.. AI
    ' Move <.. Board
    ' Move *-- Player

    ' Square <.. King
    ' Square <.. Queen
    ' Square <.. Bishop
    ' Square <.. Knight
    ' Square <.. Rook
    ' Square <.. Pawn
}

package cli{
    enum GameMode{
        PLAYERS
        BOT
    }
    class Table{}

    Table --> GameMode
}

Board --* Table
WhitePlayer --* Table
BlackPlayer --* Table
Move <.. Table
Figure <.. Table
Player <.. Table
Table <.. AI

hide empty member
' hide member
@enduml